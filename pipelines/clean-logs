// SPDX-License-Identifier: Apache-2.0
// Copyright (C) 2023 OKTET Labs Ltd. All rights reserved.
//
// Pipeline for removing old autogenerated files and compressing
// files that cannot be regenerated to save disk space.

// Execute a command on all files found by find command.
def run_cmd_on_files(params, patterns, cmd) {
    String find_cmd
    def count = 0

    if (!params.location) {
        error("Location must be specified")
    }

    find_cmd = "find '"
    find_cmd += params.location.replaceAll(/'/, "'\"'\"'")
    find_cmd += "' -depth"

    if (params.mindepth) {
        if (!(params.mindepth ==~ /^[0-9]+$/)) {
            error("Incorrect value of mindepth " +
                  "(should be nonnegative integer): ${params.mindepth}")
        }
        find_cmd += " -mindepth ${params.mindepth}"
    }

    if (params.maxdepth) {
        if (!(params.maxdepth ==~ /^[0-9]+$/)) {
            error("Incorrect value of maxdepth " +
                  "(should be nonnegative integer): ${params.maxdepth}")
        }
        find_cmd += " -maxdepth ${params.maxdepth}"
    }

    if (params.ctime) {
        if (!(params.ctime ==~ /^[+-]?[0-9]+$/)) {
            error("Incorrect value of ctime " +
                  "(should be integer): ${params.ctime}")
        }
        find_cmd += " -ctime ${params.ctime}"
    }

    if (!patterns) {
        error("File name patterns must be specified")
    }

    find_cmd += ' \\('

    patterns.each {
        if (count) {
            find_cmd += ' -or'
        }
        find_cmd += " -name ${it}"
        count++
    }

    find_cmd += ' \\)'

    find_cmd += " -exec ${cmd} '{}' \\;"

    sh("${find_cmd}")
}

pipeline {

    parameters {
        string(name: 'label',
               description: 'Label of a Jenkins node where logs are stored (sticky default)',
               defaultValue: params.label ?: 'ts-logs')
        string(name: 'location',
               description: 'Where logs are stored (sticky default)',
               defaultValue: params.location)
        string(name: 'mindepth',
               description: 'Minimum level in file system (see man find; sticky default)',
               defaultValue: params.mindepth)
        string(name: 'maxdepth',
               description: 'Maximum level in file system (see man find; sticky default)',
               defaultValue: params.maxdepth)
        string(name: 'ctime',
               description: 'How many days ago status of the target files was changed (see man find; sticky default)',
               defaultValue: params.ctime)
    }

    agent { label "${params.label}" }

    stages {
        stage("Remove files") {
            steps {
                script {
                    List remove_patterns = [ 'html', 'json', 'log.txt',
                                             'log_gist.raw', 'bublik.xml' ]

                    run_cmd_on_files(params, remove_patterns,
                                     'rm -vrf')
                }
            }
        }

        stage("Archive files") {
            steps {
                script {
                    List archive_patterns = [ 'trc_report.html',
                                              'trc_full.html' ]

                    run_cmd_on_files(params, archive_patterns,
                                     'bzip2 -v -9')
                }
            }
        }
    }
}
